name: CI/CD Chat System

on:
  push:
    branches:
      - main # This workflow will run every time you push code to the 'main' branch

jobs:
  build_and_push:
    runs-on: ubuntu-latest # The type of runner that the job will run on
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Action to check out your repository code

      - name: Set up Docker Buildx (for better Docker builds)
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        # Authenticates with Docker Hub using the secrets you configured
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get current date for tag
        # Generates a timestamp to use as a unique Docker image tag
        id: date
        run: echo "now=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT # Use $GITHUB_OUTPUT for Actions outputs

      - name: Build and push Docker image for server
        # Builds your Docker image and pushes it to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: . # The build context (root of your repo)
          file: ./server/Dockerfile # Path to your server's Dockerfile
          push: true # Push the image to Docker Hub
          tags: | # List of tags for your image
            ${{ secrets.DOCKER_USERNAME }}/chat-server:latest # Always tag with 'latest'
            ${{ secrets.DOCKER_USERNAME }}/chat-server:${{ github.sha }} # Tag with Git commit SHA
            ${{ secrets.DOCKER_USERNAME }}/chat-server:${{ steps.date.outputs.now }} # Tag with timestamp
          # Optional: Add build arguments if your Dockerfile uses them
          # build-args: |
          #   VERSION=${{ github.ref_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push # This job will only run if the 'build_and_push' job succeeds
    environment: production # Optional: Define an environment for deployment (for visual tracking in GitHub)

    steps:
      - name: Deploy to remote server via SSH
        # Uses the appleboy/ssh-action to execute commands on the remote server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # --- Deployment Script (executed on your remote server) ---

            # Define your repository URL and the target path on the remote server
            # IMPORTANT: Replace 'your_github_username' with your actual GitHub username
            REPO_URL="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}.git"
            DEPLOY_PATH="/home/${{ secrets.REMOTE_USER }}/chat_system" # Adjust if your repo is cloned elsewhere

            echo "Starting deployment on ${{ secrets.REMOTE_HOST }}..."

            # Check if the repository already exists on the server
            if [ -d "$DEPLOY_PATH/.git" ]; then
              echo "Repository exists. Pulling latest changes..."
              cd "$DEPLOY_PATH" || { echo "Error: Could not navigate to $DEPLOY_PATH. Exiting deployment."; exit 1; }
              # Ensure the main branch is checked out before pulling
              git checkout main || { echo "Error: Could not checkout main branch. Exiting deployment."; exit 1; }
              git pull origin main || { echo "Error: Git pull failed. Exiting deployment."; exit 1; }
            else
              echo "Repository not found. Cloning into $DEPLOY_PATH..."
              mkdir -p "$DEPLOY_PATH"
              git clone "$REPO_URL" "$DEPLOY_PATH" || { echo "Error: Git clone failed. Exiting deployment."; exit 1; }
              cd "$DEPLOY_PATH" || { echo "Error: Could not navigate to $DEPLOY_PATH after clone. Exiting deployment."; exit 1; }
            fi

            # Ensure Docker Compose is up-to-date and using the correct context
            echo "Pulling latest Docker image for chat server from Docker Hub..."
            # This pulls the 'latest' tag that was just pushed by the 'build_and_push' job.
            docker-compose pull server

            echo "Restarting chat server services with the new image..."
            # --force-recreate ensures new containers are spun up even if no config changes
            # --no-deps ensures only the 'server' service is restarted, not its dependencies (like 'db')
            docker-compose up -d --force-recreate server

            echo "Deployment complete on ${{ secrets.REMOTE_HOST }}!"
